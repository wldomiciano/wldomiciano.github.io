<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Angular on Wellington Domiciano</title><link>https://wldomiciano.com/tags/angular/</link><description>Recent content in Angular on Wellington Domiciano</description><generator>Hugo</generator><language>pt-br</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://wldomiciano.com/tags/angular/index.xml" rel="self" type="application/rss+xml"/><item><title>Como usar o decorator @Attribute em Angular</title><link>https://wldomiciano.com/como-usar-decorator-attribute-em-angular/</link><pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate><guid>https://wldomiciano.com/como-usar-decorator-attribute-em-angular/</guid><description>&lt;p>O &lt;em>decorator&lt;/em> &lt;a href="https://angular.io/api/core/Attribute" target="_blank" rel="noopener">&lt;code>@Attribute&lt;/code>&lt;/a> permite passar dados de um componente pai para um componente filho de forma bem parecida com como é feito com o decorator &lt;a href="https://angular.io/api/core/Input" target="_blank" rel="noopener">&lt;code>@Input&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Mas &lt;code>@Attribute&lt;/code> é bastante limitado em comparação com &lt;code>@Input&lt;/code> já que ele permite apenas &lt;code>string&lt;/code> estática.&lt;/p>
&lt;h2 id="como-usar">Como usar&lt;/h2>
&lt;p>Primeiro, você deve decorar um parâmetro do &lt;em>constructor&lt;/em>.&lt;/p>
&lt;p>No código abaixo eu usei a palavra-chave &lt;code>readonly&lt;/code> apenas por questão de preferência, seu parâmetro não precisa ser &amp;ldquo;read-only&amp;rdquo; e você pode usar qualquer modificador de acesso que quiser.&lt;/p></description></item></channel></rss>