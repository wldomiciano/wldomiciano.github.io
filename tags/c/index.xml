<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Wellington Domiciano</title><link>https://wldomiciano.com/tags/c/</link><description>Recent content in C on Wellington Domiciano</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Sun, 24 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://wldomiciano.com/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>O que são os Compound Literals em C</title><link>https://wldomiciano.com/o-que-sao-compound-literals-em-c/</link><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><guid>https://wldomiciano.com/o-que-sao-compound-literals-em-c/</guid><description>Você já ouviu falar sobre Compound Literals em C?
O nome pode lhe ser estranho, mas há grandes chances de que você já tenha usado este recurso.
Ele faz parte da linguagem desde o C99 e se ainda não o conhece, eu vou te explicar.
Imagina que você tem uma struct chamada Point e uma função capaz de somar dois Points.
typedef struct { int x; int y; } Point; Point sumPoints(Point a, Point b) { Point c; c.</description></item><item><title>Uma implementação em C, JS e Java do Jogo da Cobrinha com foco na lógica</title><link>https://wldomiciano.com/jogo-da-cobrinha-com-foco-na-logica/</link><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid>https://wldomiciano.com/jogo-da-cobrinha-com-foco-na-logica/</guid><description>O objetivo deste artigo é apresentar uma lógica independente de biblioteca, framework ou linguagem e que, por isso, pode ser facilmente portada.
Abaixo estão os links para as versões em C (com SDL 2), JavaScript e Java do código completo.
C version JavaScript version (jogue aqui) Java version Ao todo são 10 funções das quais apenas 3 são dependentes da plataforma. Aqui eu apresento a versão em C.</description></item></channel></rss>